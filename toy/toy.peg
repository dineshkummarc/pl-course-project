
// Overall structure
start			=	__ s:statements _ line_comment?				{ return s };
statements		=	statement*
statement		=	s:part_statement _ line_comment? EOS						{ return s };

// Part statement is a statement without an EOS. Allows us to have } be EOS only in blocks
part_statement =	_ i:identifier _ "=" _ e:expression						{ return { tag: "=", left: i, right: e }; }
				/	_ "return" _ e:expression									{ return { tag: "return", expression: e }; }
				/	_ "module" _ i:identifier									{ return { tag: "module", name: i }; }
				/	_ "import" _ i:identifier _ "as" _ j:identifier			{ return { tag: "import", name: i, alias: j }; }
				/	_ "import" _ i:identifier									{ return { tag: "import", name: i }; }
				/	_ e:expression												{ return { tag: "ignore", body: e }; }
statement_block	=	empty_lines _ "{" empty_lines s:statements _ "}"			{ return s; }
				/	empty_lines _ "{" empty_lines s:statements p:part_statement _"}"			{ s.push( p ); return s; }
				/	statement

// Expressions
expression		=	e:ternary
// Precedence levels
ternary			=	e:logical_or _ "?" __ left:ternary __ ":" __ right:ternary				{ return { tag: "ternary", expression: e, left: left, right: right }; }
				/	logical_or
logical_or		=	head:logical_and tail:( _ "||" _ logical_or )*
					{
						var result = head;
						for( var i = 0; i < tail.length; i++ ) result = { tag: "||", left: result, right: tail[ i ][ 3 ] };
						return result;
					}
logical_and		=	head:equality tail:( _ "&&" _ logical_and )*
					{
						var result = head;
						for( var i = 0; i < tail.length; i++ ) result = { tag: tail[ i ][ 1 ], left: result, right: tail[ i ][ 3 ] };
						return result;
					}
equality		=	head:comparison tail:( _ op:equality_ops _ equality )*
					{
						var result = head;
						for( var i = 0; i < tail.length; i++ ) result = { tag: tail[ i ][ 1 ], left: result, right: tail[ i ][ 3 ] };
						return result;
					}
comparison		=	head:additive tail:( _ op:comparison_ops _ comparison )*
					{
						var result = head;
						for( var i = 0; i < tail.length; i++ ) result = { tag: tail[ i ][ 1 ], left: result, right: tail[ i ][ 3 ] };
						return result;
					}
additive		=	head:multiplicative tail:( _ op:additive_ops _ additive )*
					{
						var result = head;
						for( var i = 0; i < tail.length; i++ ) result = { tag: tail[ i ][ 1 ], left: result, right: tail[ i ][ 3 ] };
						return result;
					}
multiplicative	=	head:not tail:( _ op:multiplicative_ops _ multiplicative )*
					{
						var result = head;
						for( var i = 0; i < tail.length; i++ ) result = { tag: tail[ i ][ 1 ], left: result, right: tail[ i ][ 3 ] };
						return result;
					}
not				=	"!" _ e:not																{ return { tag: "!", expression: e }; }
				/	primary

// Primary - these are your "first class citizens"
primary			=	number
				/	special
				/	function
				/	string
				/	"(" e:expression ")" args:argument_list						{ return { tag:"call", 'function':e, args:args }; }
				/	i:identifier args:argument_list								{ return { tag:"call", 'function':i, args:args }; }
				/	"(" expr:expression ")"										{ return expr; }
				/	i:identifier												{ return { tag:"ident", name:i } }
argument_list	=	"(" __ ")"													{ return []; }
				/	"(" __ first:expression rest:comma_expression* __ ")"		{ return [ first ].concat( rest ); }
comma_expression =	__ "," __ expr:expression									{ return expr; }
function		=	args:argument_list _ "=>" body:statement_block				{ return { tag: "function", body: body, args: args }; }


// Tokens
_				=	[ \t]*
__				=	[ \t\n]*
identifier		=	a:valid_first b:valid_rest*									{ return a + b.join( "" ); }
valid_first		=	[a-zA-Z]
valid_rest		=	[a-zA-Z0-9_.]
number_frac		=	"." chars:[0-9]+											{ return "." + chars.join( "" ); }
number			=	sign:"-"? chars:[0-9]+ frac:number_frac?					{ return parseFloat( sign + chars.join( "" ) + frac ); }
string			=	"'" text:([^']*) "'"										{ return text.join( "" ); }
				/	"\"" text:([^"]*) "\""										{ return text.join( "" ); }
special			=	true / false / null
true			=	"true"														{ return true; }
false			=	"false"														{ return false; }
null			=	"null"														{ return { tag: "null" }; } // PEG.js internally uses returning null to mean no match
EOS				=	"\n" empty_lines / EOF
EOF				=	!.
empty_lines		=	( [ \t]* line_comment? "\n" )*

// Operators
operators			=	"||"
					/	"&&"
					/	"|"
					/	"^"
					/	"&"
					/	"==" / "!="
					/	"<=" / "<>" / "<" / ">=" / ">"
					/	"<<" / ">>"
					/	"+" / "-"
					/	"*" / "/" / "%"
					/	"isa"
unary_operators		=	"!"
					/	"~" / "-"
					/	"++" / "--"

// Unused?
line_comment		=	"#" (!"\n" .)*
					/	"//" (!"\n" .)*
multiline_comment	=	"/*" (!"*/" .)* "*/"

// Operators
logical_or_ops		=	"||"
logical_and_ops		=	"&&"
bitwise_or_ops		=	"|"
bitwise_xor_ops		=	"^"
bitwise_and_ops		=	"&"
equality_ops		=	"==" / "!="
comparison_ops		=	"<=" / "<>" / "<" / ">=" / ">"
shift_ops			=	"<<" / ">>"
additive_ops		=	"+" / "-"
multiplicative_ops	=	"*" / "/" / "%"
not_ops				=	"!"
isa_ops				=	"isa"
negation_ops		=	"~" / "-"
inc_dec_ops			=	"++" / "--"